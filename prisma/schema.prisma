// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRATOR
  PARTICIPANT
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role     @default(PARTICIPANT)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  registrations EventRegistration[]
  addresses     Address[]           @relation("addresses_users")
  participant   Participant?

  @@map("users")
}

model Participant {
  id                         String   @id @default(uuid())
  user_id                    String   @unique
  full_name                  String
  phone_number               String
  birthdate                  DateTime
  document_number            String
  document_type              String
  guardian_name              String?
  guardian_phone_number      String?
  prayer_group               String?
  community_type             String?
  pcd_description            String?
  allergy_description        String?
  medication_use_description String?
  created_at                 DateTime @default(now())
  updated_at                 DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("participants")
}

model Event {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt

  addresses     Address[]           @relation("addresses_events")
  tickets       EventTicket[]
  registrations EventRegistration[]

  @@map("events")
}

model Address {
  id            String   @id @default(uuid())
  street        String
  street_number String
  complement    String?
  zip_code      String
  district      String
  city          String
  state         String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  events Event[] @relation("addresses_events")
  users  User[]  @relation("addresses_users")

  @@map("addresses")
}

model EventTicket {
  id                   String    @id @default(uuid())
  event_id             String
  title                String
  price                Decimal   @db.Decimal(10, 2)
  expires_in           DateTime?
  external_payment_url String?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now()) @updatedAt

  event    Event     @relation(fields: [event_id], references: [id])
  payments Payment[]

  @@map("event_tickets")
}

model EventRegistration {
  id                          String   @id @default(uuid())
  user_id                     String
  event_id                    String
  credential_name             String
  event_source                String?
  transportation_mode         String
  type                        String?
  has_participated_previously Boolean  @default(false)
  accepted_the_terms          Boolean
  is_approved                 Boolean  @default(false)
  checked_in                  Boolean  @default(false)
  created_at                  DateTime @default(now())
  updated_at                  DateTime @default(now()) @updatedAt

  event   Event    @relation(fields: [event_id], references: [id])
  user    User     @relation(fields: [user_id], references: [id])
  payment Payment?

  @@map("event_registrations")
}

model Payment {
  id                    String   @id @default(uuid())
  event_registration_id String   @unique
  event_ticket_id       String
  payment_method        String
  price                 Decimal  @db.Decimal(10, 2)
  file                  String?
  status                String
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now()) @updatedAt

  event_registration EventRegistration @relation(fields: [event_registration_id], references: [id])
  event_ticket       EventTicket       @relation(fields: [event_ticket_id], references: [id])

  @@map("payments")
}
