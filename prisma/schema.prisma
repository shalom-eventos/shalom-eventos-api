// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRATOR
  PARTICIPANT
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(PARTICIPANT)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  addresses   Address[]    @relation("addresses_users")
  participant Participant?

  @@map("users")
}

model Participant {
  id                       String   @id @default(uuid())
  userId                   String?  @unique @map("user_id")
  email                    String?
  fullName                 String   @map("full_name")
  phoneNumber              String   @map("phone_number")
  birthdate                DateTime
  documentNumber           String   @map("document_number")
  documentType             String   @map("document_type")
  guardianName             String?  @map("guardian_name")
  guardianPhoneNumber      String?  @map("guardian_phone_number")
  prayerGroup              String?  @map("prayer_group")
  communityType            String?  @map("community_type")
  pcdDescription           String?  @map("pcd_description")
  allergyDescription       String?  @map("allergy_description")
  medicationUseDescription String?  @map("medication_use_description")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @default(now()) @updatedAt @map("updated_at")

  user              User?               @relation(fields: [userId], references: [id])
  addresses         Address[]           @relation("addresses_participants")
  EventRegistration EventRegistration[]

  @@map("participants")
}

model Event {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  description String?
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  addresses     Address[]           @relation("addresses_events")
  tickets       EventTicket[]
  registrations EventRegistration[]

  @@map("events")
}

model Address {
  id           String   @id @default(uuid())
  street       String
  streetNumber String   @map("street_number")
  complement   String?
  zipCode      String   @map("zip_code")
  district     String
  city         String
  state        String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  events       Event[]       @relation("addresses_events")
  users        User[]        @relation("addresses_users")
  participants Participant[] @relation("addresses_participants")

  @@map("addresses")
}

model EventTicket {
  id                 String    @id @default(uuid())
  eventId            String    @map("event_id")
  title              String
  price              Decimal   @db.Decimal(10, 2)
  startsAt           DateTime? @map("starts_at")
  expiresAt          DateTime? @map("expires_at")
  externalPaymentUrl String?   @map("external_payment_url")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  event    Event     @relation(fields: [eventId], references: [id])
  payments Payment[]

  @@map("event_tickets")
}

model EventRegistration {
  id                        String   @id @default(uuid())
  participantId             String   @map("participant_id")
  eventId                   String   @map("event_id")
  credentialName            String   @map("credential_name")
  eventSource               String?  @map("event_source")
  transportationMode        String   @map("transportation_mode")
  type                      String?
  hasParticipatedPreviously Boolean  @default(false) @map("has_participated_previously")
  acceptedTheTerms          Boolean  @map("accepted_the_terms")
  isApproved                Boolean  @default(false) @map("is_approved")
  checkedIn                 Boolean  @default(false) @map("checked_in")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @default(now()) @updatedAt @map("updated_at")

  event       Event       @relation(fields: [eventId], references: [id])
  participant Participant @relation(fields: [participantId], references: [id])
  payment     Payment?

  @@map("event_registrations")
}

model Payment {
  id                  String   @id @default(uuid())
  eventRegistrationId String   @unique @map("event_registration_id")
  eventTicketId       String   @map("event_ticket_id")
  paymentMethod       String   @map("payment_method")
  price               Decimal  @db.Decimal(10, 2)
  file                String?
  status              String
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  registrations EventRegistration @relation(fields: [eventRegistrationId], references: [id])
  tickets       EventTicket       @relation(fields: [eventTicketId], references: [id])

  @@map("payments")
}
